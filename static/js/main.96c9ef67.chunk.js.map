{"version":3,"sources":["components/Title.js","firebase/config.js","hooks/useStorage.js","components/ProgressBar.js","components/UploadForm.js","hooks/useFirestore.js","components/ImageGrid.js","components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","projectStorage","projectFirestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","console","log","style","width","UploadForm","types","type","onChange","e","selected","target","files","includes","useFirestore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","map","key","onClick","src","alt","Modal","selectedImg","classList","contains","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.96c9ef67.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/Title.css';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>Photo Gallery</h1>\n      <h2>My Pictures</h2>\n      <p>Watch my photo collection.</p>\n    </div>\n  )\n}\n\nexport default Title;","import *as firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyA9hrwSXAhnoTi_la_Wh4g_GiaGV2iEOHQ\",\r\n    authDomain: \"photo-gallery-001.firebaseapp.com\",\r\n    databaseURL: \"https://photo-gallery-001.firebaseio.com\",\r\n    projectId: \"photo-gallery-001\",\r\n    storageBucket: \"photo-gallery-001.appspot.com\",\r\n    messagingSenderId: \"850898746768\",\r\n    appId: \"1:850898746768:web:ea8b481e27da18b4c58715\",\r\n    measurementId: \"G-NP53WYE7E7\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// Services\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport { projectStorage, projectFirestore, timestamp };","import { useState, useEffect } from 'react';\r\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config';\r\n\r\nconst useStorage = (file) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [url, setUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // references\r\n        const storageRef = projectStorage.ref(file.name);\r\n        const collectionRef = projectFirestore.collection('images');\r\n\r\n        storageRef.put(file).on('state_changed', (snap) => {\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setProgress(percentage);\r\n        }, (err) => {\r\n            setError(err);\r\n        }, async () => {\r\n            const url = await storageRef.getDownloadURL();\r\n            const createdAt = timestamp();\r\n            collectionRef.add({ url, createdAt })\r\n            setUrl(url);\r\n        })\r\n    }, [file]);\r\n\r\n    return { progress, url, error };\r\n}\r\n\r\nexport default useStorage;","import React, { useEffect } from 'react';\r\nimport useStorage from '../hooks/useStorage';\r\n\r\nconst ProgressBar = ({ file, setFile }) => {\r\n    const { url, progress } = useStorage(file);\r\n    console.log(progress, url);\r\n\r\n    useEffect(() => {\r\n        if (url) {\r\n            setFile(null);\r\n        }\r\n    }, [url, setFile]);\r\n\r\n    return (\r\n        <div className=\"progress-bar\" style={{ width: progress + '%' }}></div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar;","import React, { useState } from 'react';\r\nimport '../css/UploadForm.css';\r\nimport ProgressBar from './ProgressBar';\r\n\r\nconst UploadForm = () => {\r\n\r\n    const [file, setFile] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    const types = ['image/png', 'image/jpeg', 'image/svg'];\r\n\r\n    const changeHandler = (e) => {\r\n        let selected = e.target.files[0];\r\n        console.log(selected);\r\n        if (selected && types.includes(selected.type)) {\r\n            setFile(selected);\r\n            setError('');\r\n        } else {\r\n            setFile(null);\r\n            setError(\"Please select an image file with extension (png, jpeg or svg)\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"upload\">\r\n            <form>\r\n                <label>\r\n                    <input type=\"file\" onChange={changeHandler} />\r\n                    <span>+</span>\r\n                </label>\r\n                <div className=\"output\">\r\n                    {error && <div className=\"error\">{error}</div>}\r\n                    {file && <div className=\"success\">{file.name}</div>}\r\n                    {file && <ProgressBar file={file} setFile={setFile}/>}\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UploadForm;","import { useState, useEffect } from 'react';\r\nimport { projectFirestore } from '../firebase/config';\r\n\r\nconst useFirestore = (collection) => {\r\n    const [docs, setDocs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const unsub = projectFirestore.collection(collection)\r\n            .orderBy('createdAt', 'desc')\r\n            .onSnapshot(snap => {\r\n                let documents = [];\r\n                snap.forEach(doc => {\r\n                    documents.push({ ...doc.data(), id: doc.id });\r\n                });\r\n                setDocs(documents);\r\n            });\r\n\r\n        return () => unsub();\r\n        // this is a cleanup function that react will run when\r\n        // a component using the hook unmounts\r\n    }, [collection]);\r\n\r\n    return { docs };\r\n}\r\n\r\nexport default useFirestore;","import React from 'react';\r\nimport useFirestore from '../hooks/useFirestore';\r\n\r\nconst ImageGrid = ({ setSelectedImg }) => {\r\n    const { docs } = useFirestore('images');\r\n\r\n    return (\r\n        <div className=\"img-grid\">\r\n            {docs && docs.map(doc => (\r\n                <div className=\"img-wrap\" key={doc.id}\r\n                    onClick={() => setSelectedImg(doc.url)}>\r\n                    <img src={doc.url} alt=\"uploaded pic\" />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageGrid;\r\n","import React from 'react';\r\n\r\nconst Modal = ({ setSelectedImg, selectedImg }) => {\r\n\r\n    const handleClick = (e) => {\r\n        if (e.target.classList.contains('backdrop')) {\r\n            setSelectedImg(null);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"backdrop\" onClick={handleClick}>\r\n            <img src={selectedImg} alt=\"enlarged pic\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal;","import React, { useState } from 'react';\nimport './index.css';\nimport Title from './components/Title';\nimport UploadForm from './components/UploadForm';\nimport ImageGrid from './components/ImageGrid';\nimport Modal from './components/Modal';\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      {selectedImg && (\n        <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n      )}\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}